// package main

// import (
// 	"fmt"
// 	"log"
// 	"os"
// 	"os/signal"

// 	"github.com/IBM/sarama"
// )

// func main() {
// 	consumer()
// }

// func producer() {

// 	config := sarama.NewConfig()
// 	config.Producer.Return.Successes = true
// 	config.Consumer.Return.Errors = true

// 	// Use "localhost:9092" for external connections (host machine)
// 	// Use "kafka:9092" if running inside Docker
// 	producer, err := sarama.NewSyncProducer([]string{"localhost:9092"}, config)
// 	if err != nil {
// 		log.Fatalf("Error creating producer: %v", err)
// 	}
// 	defer producer.Close()

// 	msg := &sarama.ProducerMessage{
// 		Topic: "fibermaps",
// 		Value: sarama.StringEncoder("Hello Kafka from Go!"),
// 	}

// 	partition, offset, err := producer.SendMessage(msg)
// 	if err != nil {
// 		log.Fatalf("Failed to send message: %v", err)
// 	}

// 	fmt.Printf("Message sent to partition %d at offset %d\n", partition, offset)

// }

// func consumer() {
// 	config := sarama.NewConfig()
// 	config.Consumer.Return.Errors = true

// 	// Use "localhost:9092" for external connections (host machine)
// 	// Use "kafka:9092" if running inside Docker
// 	consumer, err := sarama.NewConsumer([]string{"localhost:9092"}, config)
// 	if err != nil {
// 		log.Fatalf("Error creating consumer: %v", err)
// 	}
// 	defer consumer.Close()

// 	partitionConsumer, err := consumer.ConsumePartition("test-topic", 0, sarama.OffsetOldest)
// 	if err != nil {
// 		log.Fatalf("Error creating partition consumer: %v", err)
// 	}
// 	defer partitionConsumer.Close()

// 	signals := make(chan os.Signal, 1)
// 	signal.Notify(signals, os.Interrupt)

// 	fmt.Println("Consumer started...")
// 	for {
// 		select {
// 		case msg := <-partitionConsumer.Messages():
// 			fmt.Printf("Received message: %s\n", string(msg.Value))
// 		case err := <-partitionConsumer.Errors():
// 			log.Printf("Error: %v\n", err)
// 		case <-signals:
// 			return
// 		}
// 	}
// }
